/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.mm.struts.advt.action;


import java.util.Vector;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import javax.sql.DataSource;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionError;
import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.mm.core.master.AdvtMaster;
import com.mm.core.master.IndvMaster;
import com.mm.core.master.RootMaster;
import com.mm.core.resource.Constant;
import com.mm.core.resource.MailText;
import com.mm.core.resource.Resource;
import com.mm.struts.advt.form.OthersComplaintForm;

/** 
 * MyEclipse Struts
 * Creation date: 07-31-2007
 * 
 * XDoclet definition:
 * @struts.action path="/othersComplaint" name="othersComplaintForm" input="/entp/othersComplaint.jsp" scope="request" validate="true"
 */
public class OthersComplaintAction extends Action {
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		OthersComplaintForm othersComplaintForm = (OthersComplaintForm) form;// TODO Auto-generated method stub
		
		HttpSession session = request.getSession();
		String userId =(String)session.getAttribute("uId");
		String compId =(String)session.getAttribute("compId");
		Vector allRights =(Vector)session.getAttribute("allRights");
		String adminFlag = allRights.elementAt(18).toString();
		
		String status = "failure";
		DataSource dataSource = getDataSource(request,"advt");
		AdvtMaster advtMaster = new AdvtMaster();
		Vector<String> dataVec = new Vector<String>();
		Vector<Vector> dataVec1 = new Vector<Vector>();
			
	   
		String uId  = othersComplaintForm.getBrandUser();
		String newUid = othersComplaintForm.getOtherBrandUser();
		String[] draftIds = othersComplaintForm.getBlogids();
		 
		 
		for(int i=0; i<draftIds.length; i++)
		{
			String drafts = draftIds[i];
			dataVec.add(drafts);
			Vector oldcompVec = advtMaster.getComplaintDetails(dataSource,Integer.parseInt(drafts));
			Vector<String> tempVec = new Vector<String>();
			tempVec.add(drafts);									//0 complaint id
			tempVec.add(oldcompVec.elementAt(7).toString().trim()); //1 fcompId
			tempVec.add(oldcompVec.elementAt(3).toString().trim()); //2 consumer id
			dataVec1.add(tempVec);
			
			
		}
		status = advtMaster.updateComplaint(dataSource, newUid, dataVec);
		if(status.equalsIgnoreCase("success"))
		{
			//mail code
			String brandUserName = "";
			String newBrandUserName = "";
			
				
				
				Vector<String> paramVec = new Vector<String>();
				paramVec.add(uId);
				paramVec.add(newUid);
				IndvMaster indvMaster = new IndvMaster();
				Vector MasilId = indvMaster.getEmailList(dataSource, paramVec);
				//////System.out.println("MasilId>>>>>>>>>>>"+MasilId);
				if(MasilId.size()==2)
				{
					Vector brandDataVec = (Vector)MasilId.elementAt(0);
					Vector newBrandDataVec = (Vector)MasilId.elementAt(1);
					
					brandUserName = brandDataVec.elementAt(0).toString()+" "+brandDataVec.elementAt(1).toString();
					String branduserMail = brandDataVec.elementAt(2).toString();
					
					newBrandUserName = newBrandDataVec.elementAt(0).toString()+" "+newBrandDataVec.elementAt(1).toString();
					String newBranduserMail = newBrandDataVec.elementAt(2).toString();
					
									
					MailText mailtext = new MailText();
					Resource resource = new Resource();
					
					String subject = "Switch some complaints from "+brandUserName +" to "+newBrandUserName;
					
					Vector<String> tempMailParam = new Vector<String>();
					tempMailParam.add("Advertiser");//sender company type
					tempMailParam.add("Advertiser");//receipient company type
					tempMailParam.add("Allotment");//mail description
					//get mail text alert fot sending mail to core user and admin core user
					RootMaster rootMaster = new RootMaster();
					String mailTextLAlert = rootMaster.getMailText(dataSource, tempMailParam);
					String finalCompId = "";
					for(int i=0;i<dataVec1.size();i++)
					{
						Vector tempVec = (Vector)dataVec1.elementAt(i);
						String fcomId = tempVec.elementAt(1).toString().trim();
						finalCompId = finalCompId + (i+1) + ". "+fcomId+"\n\n";
					}
					String strMailText = mailtext.getETextForBrandNewComplaint(newBrandDataVec,finalCompId,mailTextLAlert);
					String strFinalStatus1 = resource.sendMail(strMailText, Constant.Email_Sender,newBranduserMail, subject);
					////System.out.println("strFinalStatus1>>>>>>>>>>"+strFinalStatus1);
					
					
					Vector<String> tempMailParam1 = new Vector<String>();
					tempMailParam1.add("Advertiser");//sender company type
					tempMailParam1.add("Advertiser");//receipient company type
					tempMailParam1.add("Switch");//mail description
					//get mail text alert fot sending mail to core user and admin core user
					
					String mailTextLAlert1 = rootMaster.getMailText(dataSource, tempMailParam1);
					String strMailText1 = mailtext.getETextForBrandNewComplaint(brandDataVec,finalCompId,mailTextLAlert1);
					String strFinalStatus2 = resource.sendMail(strMailText1, Constant.Email_Sender,branduserMail, subject);
					////System.out.println("strFinalStatus2>>>>>>>>>>"+strFinalStatus2);
					
				
			}
			
			//mail code end
			
			ActionErrors msg = new ActionErrors();
			msg.clear();
			msg.add("switch", new ActionError("errors.switch.Success",brandUserName,newBrandUserName));
			
				saveErrors(request, msg);
						
		}
		else
		{
			ActionErrors msg = new ActionErrors();
			msg.clear();
			msg.add("switch", new ActionError("errors.switch.Failure"));
			
			saveErrors(request, msg);
			
		}
		
		Vector dataVec2 = new Vector();		
		dataVec2.add(userId);
		dataVec2.add(compId);
		dataVec2.add(adminFlag);
			
		Vector advtCountVec = advtMaster.complaintCountAdvt(getDataSource(request, "advt"), dataVec2);		
		session.setAttribute("advtCountVec", advtCountVec);						
		////System.out.println("advtCountVec.............OthersComplaintAction........... "+advtCountVec);
		
		return mapping.findForward(status);
	}
}