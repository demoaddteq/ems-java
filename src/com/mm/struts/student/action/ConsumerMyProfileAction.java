


/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.mm.struts.student.action;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionError;
import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import com.mm.struts.student.form.ConsumerMyProfileForm;

import java.io.IOException;
import java.io.PrintWriter;
import java.text.SimpleDateFormat;
import java.util.StringTokenizer;
import java.util.Vector;
import com.mm.core.master.*;

import javax.sql.DataSource;
import java.util.*;

/** 
 * MyEclipse Struts
 * Creation date: 06-20-2007
 * 
 * XDoclet definition:
 * @struts.action path="/consumerMyProfile" name="ConsumerMyProfileForm" input="/form/consumerMyProfile.jsp" scope="request" validate="true"
 * @struts.action-forward name="success" path="consumerMyProfile.jsp"
 */
public class ConsumerMyProfileAction extends Action {
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 * @throws Exception 
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,HttpServletRequest request, HttpServletResponse response) throws Exception {
		ConsumerMyProfileForm consumerMyProfileForm = (ConsumerMyProfileForm) form;// TODO Auto-generated method stub
			
		    String result = "failure";
		    String result_ResidentDetail = "failure";
		    String lastmodifyDate = "";
		    String lastmodifyTime = "";
		    String mobile = "";
		    String birthDate = "";
		    String spBirthDate = "";
		    String ch1BirthDate = "";
		    String ch2BirthDate = "";
		    String ch3BirthDate = "";
			Vector <String> datavec = new Vector<String>();
			RootMaster rootMaster= new RootMaster();
			IndvMaster indvMaster = new IndvMaster();
			DataSource dataSource = getDataSource(request,"student");
			
			HttpSession session = request.getSession();
			String uid = (String)session.getAttribute("uId");
			
			//get date of birth
			String date = consumerMyProfileForm.getUserDate();
			String month = consumerMyProfileForm.getUserMonth();
			String year = consumerMyProfileForm.getUserYear();
			if(date.length()>0 && month.length()>0 && year.length()>0)
				birthDate = year+"-"+month+"-"+date;
			

			//get Spouse date of birth
			
			String spDate = consumerMyProfileForm.getSpouseDate();
			String spMonth = consumerMyProfileForm.getSpouseMonth();
			String spYear = consumerMyProfileForm.getSpouseYear();
			if(spDate.length()>0 && spMonth.length()>0 && spYear.length()>0)
				spBirthDate = spYear+"-"+spMonth+"-"+spDate;
			
			
			//get Child 1 date of birth
			
			String ch1Date = consumerMyProfileForm.getChild1Date();
			String ch1Month = consumerMyProfileForm.getChild1Month();
			String ch1Year = consumerMyProfileForm.getChild1Year();
			if(ch1Date.length()>0 && ch1Month.length()>0 && ch1Year.length()>0)
				ch1BirthDate = ch1Year+"-"+ch1Month+"-"+ch1Date;
			
			
			//get Child 2 date of birth
			
			String ch2Date = consumerMyProfileForm.getChild2Date();
			String ch2Month = consumerMyProfileForm.getChild2Month();
			String ch2Year = consumerMyProfileForm.getChild2Year();
			if(ch2Date.length()>0 && ch2Month.length()>0 && ch2Year.length()>0)
				ch2BirthDate = ch2Year+"-"+ch2Month+"-"+ch2Date;
			
			//get Child 3 date of birth
			
			String ch3Date = consumerMyProfileForm.getChild3Date();
			String ch3Month = consumerMyProfileForm.getChild3Month();
			String ch3Year = consumerMyProfileForm.getChild3Year();
			if(ch3Date.length()>0 && ch3Month.length()>0 && ch3Year.length()>0)
				ch3BirthDate = ch3Year+"-"+ch3Month+"-"+ch3Date;
			
			
			java.util.Date dt = new java.util.Date();
			SimpleDateFormat sform = new SimpleDateFormat("yyyy-MM-dd, HH:mm:ss");
			String completeRemDate = sform.format(dt);
			StringTokenizer sttotal = new StringTokenizer(completeRemDate, ",");
			lastmodifyDate = sttotal.nextToken();
			lastmodifyTime = sttotal.nextToken();
			
			if(consumerMyProfileForm.getTxtMobile().trim().length()>0)
				mobile=consumerMyProfileForm.getTxtPrefix().trim()+"~"+consumerMyProfileForm.getTxtMobile().trim();
			String strTxtPrefix = "+0";
			if(consumerMyProfileForm.getTxtPrefix().length()>0)
			{
				strTxtPrefix = consumerMyProfileForm.getTxtPrefix();
			}
			String tempCountry[] = consumerMyProfileForm.getCountry().split("~");
			String userCountry=tempCountry[0];
			String userState = consumerMyProfileForm.getState();
			String userCity = consumerMyProfileForm.getCity();
			
			if(userCountry.equals("-1"))
			{
				//SET COUNTRY ,STATE ,CITY IN DATA BASE AND GENERATE ID FOR THAT AND ADD THESE IDS IN COMPANY MASTER TABLE.
				userCountry=rootMaster.insertCountry(dataSource, strTxtPrefix, consumerMyProfileForm.getOthercountry().toString().trim());//return country id
				userState=rootMaster.insertState(dataSource,consumerMyProfileForm.getOtherstate().toString().trim(),userCountry);
				userCity=rootMaster.insertCity(dataSource,consumerMyProfileForm.getOthercity().toString().trim(),userState,userCountry);
			}
			else if(userState.equals("-1"))
			{
				//set state .city in data base and add these field in company master table
				userState=rootMaster.insertState(dataSource,consumerMyProfileForm.getOtherstate().toString().trim(),userCountry);
				userCity=rootMaster.insertCity(dataSource,consumerMyProfileForm.getOthercity().toString().trim(),userState,userCountry);
			}
			else if(userCity.equals("-1"))
			{
				//set sity in data base and add that is in company master.
				userCity=rootMaster.insertCity(dataSource,consumerMyProfileForm.getOthercity().toString().trim(),userState,userCountry);
			}
			else
			{
				//nothing 
			}
			String Courseid=consumerMyProfileForm.getCourseAtte();
			String MajorSubid=consumerMyProfileForm.getMajorsub();
			String CourseN=consumerMyProfileForm.getCourseAtte();
			String MajorSub=consumerMyProfileForm.getMajorsub();
			
			if(Courseid.equalsIgnoreCase("-1"))
			{
				CourseN=rootMaster.insertCourse(dataSource, consumerMyProfileForm.getOthercourse().toString().trim());
				Courseid = CourseN;
			}
			if(MajorSubid.equalsIgnoreCase("-1"))
			{
				MajorSub=rootMaster.insertStream(dataSource,Courseid.trim(), consumerMyProfileForm.getOthermajorsub().toString().trim());
			}
    		
			String userAddress="";
			String flat=consumerMyProfileForm.getFlatNo();
			String tower=consumerMyProfileForm.getTowerName();
			String building=consumerMyProfileForm.getBuildingName();
			userAddress=flat+"-"+tower+"-"+building ;
			
			
			//set data Vector for modify user Information
			datavec.add(uid);													//0 userId
			datavec.add(consumerMyProfileForm.getUserfname());					//1 first Name
			datavec.add(consumerMyProfileForm.getUserlname());					//2 last name
			datavec.add(consumerMyProfileForm.getUseremail());  				//3 email
			datavec.add("0120-22222222");										//4 phone
			datavec.add(consumerMyProfileForm.getTxtMobile());					//5 mobile 
			datavec.add(userAddress); 											//6 address
			datavec.add("94");													//7 country
			datavec.add(consumerMyProfileForm.getFacilityName());				//8 state(Facility Providor)
			datavec.add("1");													//9 city
			datavec.add(consumerMyProfileForm.getUserpincode());				//10 pincode
			datavec.add(lastmodifyDate);										//11 last modify date
			datavec.add(lastmodifyTime);										//12 last modify time		
			datavec.add(consumerMyProfileForm.getAboutuscombo());				//13 About Us
			datavec.add(consumerMyProfileForm.getAnnualincomecombo());			//14 Annual Income
			datavec.add(birthDate);												//15 Birth Date
			datavec.add(consumerMyProfileForm.getEducationCombo());				//16 Education
			datavec.add(consumerMyProfileForm.getMaritalcombo());				//17 Marital Status
			datavec.add(consumerMyProfileForm.getProfessioncombo());			//18 Proffession
			datavec.add(consumerMyProfileForm.getGender());						//19 Gender
			datavec.add(consumerMyProfileForm.getStatus());						//20 Status (Tenant/Owner)
			datavec.add("38");													//21 Course
			datavec.add("23");													//22 Mazor Sub
			datavec.add(consumerMyProfileForm.getProEnable());					//23 Profile Enable
			datavec.add(consumerMyProfileForm.getPdfEnable());					//24 Pdf Enable
			datavec.add(consumerMyProfileForm.getSpouseName());					//25 Spouse Name
			datavec.add(spBirthDate);											//26 Spouse DOB
			datavec.add(consumerMyProfileForm.getChildName1());					//27 Child 1 Name
			datavec.add(ch1BirthDate);											//28 Child 1 DOB
			datavec.add(consumerMyProfileForm.getChildName2());					//29 Child 2 Name
			datavec.add(ch2BirthDate);											//30 Child 2 DOB
			datavec.add(consumerMyProfileForm.getChildName3());					//31 Child 3 Name
			datavec.add(ch3BirthDate);											//32 Child 3 DOB
			datavec.add(consumerMyProfileForm.getFlatNo());						//33 Flat No
			datavec.add(consumerMyProfileForm.getBuildingName());				//34 Building Name
			datavec.add(consumerMyProfileForm.getTowerName());					//35 Tower Name
			datavec.add(consumerMyProfileForm.getVehicleType());				//36 Vehicle Type
			datavec.add(consumerMyProfileForm.getVehicleName());				//37 Vehicle Name
			datavec.add(consumerMyProfileForm.getModelYear());					//38 Vehicle Model Year
			datavec.add(consumerMyProfileForm.getManuFacturer());				//39 Vehile Menufacturer
			
			for(int i=0;i<39;i++){
				System.out.println("Update-->"+i+" Th Position--"+datavec.elementAt(i).toString());
			}
			
			result="modify";
			result = indvMaster.updateUserInfo(dataSource,datavec);
			
			System.out.println("Update Success");
			
			if(result.equalsIgnoreCase("success"))
			{	
				
				result_ResidentDetail = indvMaster.updateResidentDetailInfo(dataSource,datavec);
				
			}
			
			if(result.equalsIgnoreCase("success"))
			{	
				ActionErrors errors = new ActionErrors();
				errors.add("modify", new ActionError("errors.user.modifySuucess"));
				if(!errors.isEmpty())
				{
					saveErrors(request, errors);
				}
			}
			else
			{
				ActionErrors errors = new ActionErrors();
				errors.add("modify", new ActionError("errors.user.modifyFailure"));
				if(!errors.isEmpty())
				{
					saveErrors(request, errors);
				}
			}
			
			return mapping.findForward(result);
	
		}

	



}