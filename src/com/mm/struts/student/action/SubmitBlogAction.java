/*
 * 
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.mm.struts.student.action;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.apache.struts.actions.LookupDispatchAction;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionError;
import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import javax.sql.DataSource;
import com.mm.struts.student.form.WriteBlogForm;
import com.mm.struts.student.form.WriteComplaintForm;
import com.mm.core.master.*;
import com.mm.core.resource.Constant;
import com.mm.core.resource.MailText;
import com.mm.core.resource.Resource;

import java.text.SimpleDateFormat;
import java.util.*;

/** 
 * MyEclipse Struts
 * Creation date: 07-12-2007
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 */
public class SubmitBlogAction extends LookupDispatchAction {
	/*
	 * Generated Methods
	 */
	
	protected Map getKeyMethodMap()
	{
		Map<String , String> map = new HashMap<String , String> ();
		map.put("preview.edit", "edit");
		map.put("preview.save", "submit");	
		return map;
	}
	
	public ActionForward edit(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
		HttpSession session =request.getSession();
		String userid=(String)session.getAttribute("uId");
		String companyid=(String)session.getAttribute("compId");
		
		IndvMaster indvMaster= new IndvMaster();		
		
		System.out.println("manoj in edit Classified");
		Vector dataVec = getData(request);
		
		System.out.println("Data Vector is "+dataVec);
		
		WriteBlogForm writeBlogForm = new WriteBlogForm();
		writeBlogForm.setBlogTitle(dataVec.elementAt(0).toString());
		writeBlogForm.setBlogCategory(dataVec.elementAt(2).toString());
		writeBlogForm.setBlogtext(dataVec.elementAt(1).toString());
		writeBlogForm.setQtype("blog");				
		writeBlogForm.setCons("0");
		request.setAttribute("stdWriteBlogForm", writeBlogForm);
		
		return mapping.findForward("failure");
	}

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	
	public ActionForward submit(ActionMapping mapping, ActionForm form,	HttpServletRequest request, HttpServletResponse response) {
			HttpSession session = request.getSession();

			String advtLid=(String)session.getAttribute("fuId");
			System.out.println("Company User Id is "+advtLid);
			
			String fianlStatus = "failure";
		if(((String)session.getAttribute("flagforw")).equalsIgnoreCase("1"))
		{
			session.setAttribute("flagforw","0");
			
			String finalStatus = "failure";
			IndvMaster indvMaster = new IndvMaster();
			EntpMaster entpMaster = new EntpMaster();
			RootMaster rootMaster = new RootMaster();
			
			DataSource dataSource = getDataSource(request,"student");
			
			
			String fcomId = "";
			
			Vector dataVec = getData(request);
			System.out.println("Data Vector is "+dataVec);
			java.util.Date dt = new java.util.Date();
			SimpleDateFormat sform = new SimpleDateFormat("yyyy-MM-dd, HH:mm:ss,a");
			String completeRemDate = sform.format(dt);
			StringTokenizer sttotal = new StringTokenizer(completeRemDate, ",");
		    String creationDate = sttotal.nextToken();
		    String creationTime = sttotal.nextToken();
		    String timePart = sttotal.nextToken();
		    
		    String publishDate = "0000-00-00";
		    String publishTime = "00:00:00";
		    String publishFlag = "0";
		    String publishAt = "1@Week";
		    
		    
		    publishDate = creationDate;
	    	publishTime = creationTime;
	    	
	    	publishAt = "0@Week";
		    
			String uId = (String)session.getAttribute("uId");
			String compId = "26";
			String categoryId ="3";
			String otherBrand = "";
			
			String advtId = "1";
		//	String advtLid = "1";
			String b_flag="1";
			String dealerId = "0";
			int uid;
			int C_uid;
			String tagId="2";
			String cu_id = "";
		    String fcu_id = "";
		    String com_type="";
		    String entpId="";
					
			
		  
			
				    b_flag="0";
				    publishFlag="1"	;
				    tagId="1";
				    com_type=(String)session.getAttribute("cptype");
				    //entpId = String.valueOf(indvMaster.getCompanyId(dataSource,"Enterprise",com_type));
				    //fcu_id = String.valueOf(entpMaster.getCompnyAdminUserId(dataSource,Integer.parseInt(entpId)));
				    entpId="2"; fcu_id="2";
				    
				    
			
			
			//set all Complaint data for inserting Complaint in data Base.
			
			session.removeAttribute("cptype");
			Vector<String> complaintVec =  new Vector<String>();
			complaintVec.add(dataVec.elementAt(0).toString());	//blog Title
			complaintVec.add(dataVec.elementAt(1).toString());	//blog Text
			//complaintVec.add("Query Text");	//blog Text
			complaintVec.add("");	//Relevent Text
			complaintVec.add(categoryId);						//Category
			complaintVec.add(creationDate);						//Creation Date
			complaintVec.add(publishDate);						//Publish Date
			complaintVec.add(creationTime);						//Creation Time
			complaintVec.add(publishTime);						//Publish Time
			complaintVec.add("0000-00-00");						//Last Modify Date
			complaintVec.add("00:00:00");						//Last Modify Time
			complaintVec.add(uId);								//User (Complainent id) LoginId()uId
			complaintVec.add(compId);							//User Company Id
			complaintVec.add(timePart);							//Time Part
			complaintVec.add("0");								//View Count
			complaintVec.add(entpId);							//Entp Id(Complaint handler company Id)
			complaintVec.add(fcu_id);							//cu_Id(Complaint handler User Id)
			complaintVec.add(advtId);							//advtId(Company Id of brand) 
			complaintVec.add(advtLid);							//advtlId(Company user Id of brand) 
			complaintVec.add(dealerId);							//Dealer Id
			complaintVec.add(tagId);							    //Tag Id
			complaintVec.add("0000-00-00");						//Resolved Date
			complaintVec.add("0000-00-00");						//Closed Date
			complaintVec.add(b_flag);							//Brand Flag
			complaintVec.add(publishFlag);						//Publish Flag
			complaintVec.add(publishAt);						//Publish On 
			complaintVec.add(otherBrand);						//otherBranddataVec.elementAt(17).toString()
			complaintVec.add(dataVec.elementAt(2).toString());	//Query type
			//complaintVec.add("blog");	//Query type
			
			String strComplResult = indvMaster.insertNewComplaints(dataSource, complaintVec);
			
			
			System.out.println("Checkpoint 12");
			fianlStatus = "success";
		Vector dataVec1 = new Vector();		
			dataVec1.add(uId);
			dataVec1.add(compId);					
			Vector countVec = indvMaster.complaintCount(getDataSource(request, "student"), dataVec1);		
			session.setAttribute("countVec", countVec);						
			
		/*	if(strComplResult.equalsIgnoreCase("success"))
			{
				//get Complaint Id of this new Complaint and set fcom Id for this Complaint
				fcomId = indvMaster.getFinalComplainId(dataSource, Integer.parseInt(uId), dataVec.elementAt(0).toString(), creationTime);
				String fcomId1 = indvMaster.getComplainId(dataSource, Integer.parseInt(uId), dataVec.elementAt(0).toString(), creationTime);
				String fcomarr[] = fcomId1.split("/");
				Vector<String> tempCompVec = new Vector<String>();
				tempCompVec.add(fcomId);//final compaint id
				tempCompVec.add(fcomarr[0]);//Complaint id
				indvMaster.setFinalId(dataSource, tempCompVec);
				
				//get mail text for sending mail
				Vector<String> paramVec = new Vector<String>();
				String coreAdminid = String.valueOf(entpMaster.getCompnyAdminUserId(dataSource,Integer.parseInt(entpId)));
				paramVec.add(uId);
				paramVec.add(advtLid);
				
				////////System.out.println("paramVec>>>>>>>>>>"+paramVec);
				Vector emailVec = indvMaster.getEmailList(dataSource, paramVec);
				////System.out.println("emailVec>>>>>>>>>>"+emailVec);
				
				Vector<String> tempMailParam = new Vector<String>();
				tempMailParam.add("Consumer");//sender company type
				tempMailParam.add("Enterprise");//receipient company type
				tempMailParam.add("Complaint");//mail description
				//get mail text alert fot sending mail to core user and admin core user
				String mailTextLAlert = rootMaster.getMailText(dataSource, tempMailParam);
				Vector consumerVec = (Vector)emailVec.elementAt(0);
				String consumerName =consumerVec.elementAt(0).toString()+" "+consumerVec.elementAt(1).toString();
				String consumermail = consumerVec.elementAt(2).toString().trim();
				String subject = "Register New Querie ("+ fcomId + ") by "+ consumerName;
				////////System.out.println("emailVec>>>>>>>>>>>>>>"+emailVec);
				for(int i=1; i<emailVec.size();i++)
				{
					MailText mt = new MailText();
					Resource resr = new Resource();
					Vector coreMailVec = (Vector)emailVec.elementAt(i);
										
					String strMailText = mt.getETextForCoreNewComplaint(coreMailVec,fcomId,mailTextLAlert,consumerName,fcomarr[0]);
					////System.out.println("strMailText>>>>>>>>>>"+strMailText);
					
					resr.sendMail(strMailText, Constant.Email_Sender,((Vector)emailVec.elementAt(i)).elementAt(2).toString() , subject);
					////////System.out.println("str Email status fo core"+strEmailStatus);
				}
				//send mail to consumer email address
				//get mail text from the mailText file
				MailText mailtext = new MailText();
				Resource resource = new Resource();
				String strConsumerMailtex = mailtext.getTextForConsumer(consumerName,fcomId);
				String strFinalStatus = resource.sendMail(strConsumerMailtex, Constant.Email_Sender, consumermail, subject);
				//////System.out.println("str Email Status after consumer"+strFinalStatus);
				if(strFinalStatus.equalsIgnoreCase("success"))
				{
					ActionErrors msg = new ActionErrors();
					msg.clear();
					msg.add("delete", new ActionError("indv.complaint.submitSuccess",fcomId));
					
					saveErrors(request, msg);
					fianlStatus = "success";
				}
				else
				{
					ActionErrors msg = new ActionErrors();
					msg.clear();
					msg.add("delete", new ActionError("indv.complaint.submitFailure"));
					
					saveErrors(request, msg);
					fianlStatus = "failure";
				}
					
				
				//send mail to core user and complaintent user  with fcom id
			}
			else
			{
				ActionErrors msg = new ActionErrors();
				msg.clear();
				msg.add("delete", new ActionError("indv.complaint.submitFailure"));
				
				saveErrors(request, msg);
				if(dataVec.elementAt(17).toString().equalsIgnoreCase("blog"))
				{
					fianlStatus="blogfailure";
				}
				fianlStatus = "failure";
			}*/
					   
			if(fianlStatus.equalsIgnoreCase("failure"))
			{
				WriteBlogForm writeComplaintForm = new WriteBlogForm();
				writeComplaintForm.setBlogTitle(dataVec.elementAt(0).toString());
				writeComplaintForm.setBlogtext(dataVec.elementAt(1).toString());
				writeComplaintForm.setQtype(dataVec.elementAt(3).toString());
				writeComplaintForm.setCons(dataVec.elementAt(4).toString());
				writeComplaintForm.setStudent(dataVec.elementAt(4).toString());
				
				request.setAttribute("stdWriteComplaintForm", writeComplaintForm);
				
			}
			else
			{
				fianlStatus="compSuccess";
//				To write a blog file.
				//rootMaster.CreateBlogsFile(dataSource);
				session.removeAttribute("cid");
				session.removeAttribute("sid");
				session.removeAttribute("pid");
			}
			
			if(fianlStatus.equalsIgnoreCase("compSuccess")){
				session.setAttribute("flagforw","0");
				
			}
			if(dataVec.elementAt(3).toString().equalsIgnoreCase("blog"))
			{
				fianlStatus="blogSuccess";
			}
			return mapping.findForward(fianlStatus);
			 
		}else{
			
			return mapping.findForward("compSuccess");
		}
	}
	
	
	public Vector getData(HttpServletRequest request)
	{
		Vector<String> dataVec = new Vector<String>();
		dataVec.add((String)request.getParameter("blogTitle"));			//0
		dataVec.add((String)request.getParameter("blogText"));			//1
		dataVec.add((String)request.getParameter("qtype"));		        //2
		dataVec.add((String)request.getParameter("cons"));		        //3
			
		return dataVec;
	}
	public Vector getExtraData(HttpServletRequest request)
	{
		Vector<String> dataVec = new Vector<String>();
		dataVec.add((String)request.getParameter("categoryName"));
		dataVec.add((String)request.getParameter("brandName"));
		dataVec.add((String)request.getParameter("countryName"));
		dataVec.add((String)request.getParameter("stateName"));
		dataVec.add((String)request.getParameter("cityName"));
		return dataVec;
	}
	public String getCatData(DataSource dataSource,Vector dataVec)
	{
		
		String userCategory=dataVec.elementAt(1).toString();
		RootMaster rootMaster = new RootMaster();
		if(userCategory.equals("-1"))
		{
			//SET category,brand and contact person IN DATA BASE .
			userCategory=rootMaster.insertCategory(dataSource,dataVec.elementAt(2).toString());//return category id
			
		}				
		return userCategory;
	}
	
		
	
}