
/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.mm.struts.student.action;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import com.mm.struts.student.form.WriteRequestForm;

import com.mm.core.master.*;
import javax.sql.DataSource;
import java.util.Vector;




/** 
 * MyEclipse Struts
 * Creation date: 06-11-2007
 * 
 * XDoclet definition:
 * @struts.action path="/writeComplaint" name="writeRequestForm" input="/form/writeComplaint.jsp" scope="request" validate="true"
 * @struts.action-forward name="success" path="writeComplaint.jsp"
 */
public class WriteRequestAction extends Action {
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,HttpServletRequest request, HttpServletResponse response) {
		WriteRequestForm writeRequestForm = (WriteRequestForm) form;// TODO Auto-generated method stub
		RootMaster rootMaster = new RootMaster();
		
		IndvMaster im = new IndvMaster();
		
		String result = "failure";
		Vector <String> dataVec = new Vector<String>();
		String categoryName="",brandName="",countryName="", stateName="",cityName="";
		//set all form data in a vector and transfer this vector to the complaint preview page.
		//and set status success for that action.
		DataSource dataSource = getDataSource(request, "student");
		String category = writeRequestForm.getCategory().toString().trim();
		String otherCat = writeRequestForm.getOtherCategory().toString().trim();
		String brand = writeRequestForm.getBrand().toString().trim();
		String otherBrand = writeRequestForm.getOtherBrand().toString().trim();
		String country = writeRequestForm.getCountry().toString().trim();
		String countryArr[] = country.split("~");
		String otherCountry = writeRequestForm.getOtherCountry().toString().trim();
		String state = writeRequestForm.getState().toString().trim();
		String otherState = writeRequestForm.getOtherState().toString().trim();
		String city = writeRequestForm.getCity().toString().trim();
		String otherCity = writeRequestForm.getOtherCity().toString().trim();
		
		int numCatID = Integer.parseInt(category);
		////System.out.println("numCatIDnumCat IDnumCatIDm,``````````......."+numCatID);
		int numBrandId = (brand.length()>0)?Integer.parseInt(brand):-1;
		int numCountryId = 0;
		int numStateId = (state.length()>0)?Integer.parseInt(state):-1;
		int numCityId = (city.length()>0)?Integer.parseInt(city):-1;
		
		if(numCatID!=-1 && category.length()>0 && numCatID!=0 )
		{
			numCatID = Integer.parseInt(category);
			Vector tempVec = rootMaster.getCategoryName(dataSource, numCatID);
			categoryName=tempVec.elementAt(0).toString().trim();
		}
		else
		{
			categoryName = otherCat;
		}
		if(numBrandId!=-1 && brand.length()>0)
		{
			numBrandId = Integer.parseInt(brand);
			brandName = rootMaster.getBrandName(dataSource, numBrandId);
		}
		else
		{
			brandName = otherBrand;
		}
		
		if(numCountryId!=-1 && country.length()>0)
		{
			numCountryId=Integer.parseInt(countryArr[0]);
			countryName = rootMaster.getCountryName(dataSource, numCountryId);
		}
		else
		{
			countryName = otherCountry;
		}
		if(numStateId!=-1 && state.length()>0)
		{
			numStateId = Integer.parseInt(state);
			stateName = rootMaster.getStateName(dataSource, numStateId);
		}
		else
		{
			stateName = otherState;
		}
		if(numCityId!=-1 && city.length()>0)
		{
			numCityId = Integer.parseInt(city);
			cityName = rootMaster.getPlaceName(dataSource, numCityId);
		}
		else
		{
			cityName = otherCity;
		}
		
		Vector<String> extraVec =  new Vector<String>();
		extraVec.add(categoryName);
		extraVec.add(brandName);
		extraVec.add(countryName);
		extraVec.add(stateName);
		extraVec.add(cityName);
		
		
		dataVec.add(writeRequestForm.getBlogTitle().toString().trim());
		dataVec.add(category);
		dataVec.add(writeRequestForm.getOtherCategory().toString().trim());
		dataVec.add(brand);
		dataVec.add(writeRequestForm.getOtherBrand().toString().trim());
		dataVec.add(writeRequestForm.getCheckDealer().toString().trim());
		dataVec.add(writeRequestForm.getDealerName().toString().trim());
		dataVec.add(writeRequestForm.getAddress().toString().trim());
		dataVec.add(country);
		dataVec.add(writeRequestForm.getOtherCountry().toString().trim());
		dataVec.add(state);
		dataVec.add(writeRequestForm.getOtherState().toString().trim());
		dataVec.add(city);
		dataVec.add(writeRequestForm.getOtherCity().toString().trim());
		dataVec.add(writeRequestForm.getPincode().toString().trim());
		dataVec.add(writeRequestForm.getBlogtext().toString().trim());
		dataVec.add(writeRequestForm.getReleventtext().toString().trim());
		dataVec.add(writeRequestForm.getQtype().toString().trim());
		dataVec.add(writeRequestForm.getCons().toString().trim());
		////System.out.println("datavac in request action.>>>>>>>>>>>>"+dataVec.size());
		////System.out.println("datavac in request action>>>>>>>>>>>"+writeRequestForm.getQtype().toString().trim());
		
		
		request.setAttribute("complaintData",dataVec);
		request.setAttribute("extraData",extraVec);
		if(request.getAttribute("complaintData")!=null)
		{
			result = "success";
		}
		return mapping.findForward(result);
		
	}
}