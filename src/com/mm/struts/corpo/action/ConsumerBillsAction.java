/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.mm.struts.corpo.action;

import java.sql.Date;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Vector;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import javax.sql.DataSource;

import org.apache.commons.dbcp.DataSourceConnectionFactory;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.mm.resource.APPConstant;
import com.mm.struts.corpo.form.ConsumerBillsForm;
import com.mm.struts.corpo.form.StaffMasterForm;
import com.mm.bean.ConsumerBillDetailBean;
import com.mm.core.master.ConsumerBillsDao;
import com.mm.core.resource.LoginHelper;

/** 
 * MyEclipse Struts
 * Creation date: 10-09-2009
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 */
public class ConsumerBillsAction extends Action {
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		System.out.println("11In execute ConsumerBillsAction Action");
		HttpSession session = request.getSession();
		ConsumerBillsForm ConsumerBillsForm = (ConsumerBillsForm) form;
		ConsumerBillsDao conBillDao = new ConsumerBillsDao();
		DataSource dataSource = getDataSource(request, "corpo");
		String operation = request.getParameter("operation");
		String month = request.getParameter("month");
		String year = request.getParameter("year");
		
		
		String forward = "showConsumerBills";
		int facilityId = (session.getAttribute("fId")!=null) ? Integer.parseInt((String)session.getAttribute("fId")) : 0;
		ConsumerBillsForm.setFacilityId(facilityId);
		
		System.out.println("33operation in Staff Master->"+operation);
		System.out.println("44operation->"+ConsumerBillsForm.getOperation());
		
		request.setAttribute("facilityId", facilityId);
		if (operation == null) {
			operation = ConsumerBillsForm.getOperation();
		}
		if (operation == null) {
			operation = "";
		}
		
		
		
		try {
			if (operation.equals("addnew")) {
				String results = validateServiceForm(ConsumerBillsForm);
				if (results != null) {
					request.setAttribute(APPConstant.MESSAGE, results);
					forward = "addConsumerBillsFailure";
				}
				else {
					System.out.println("Ready To Insert....................Consumer Bill Detail Form");
					conBillDao.insertDetail(dataSource, ConsumerBillsForm);
					Vector consumerList = conBillDao.getConsumerBillList(dataSource, facilityId);
					System.out.println("consumerList in Staff Master Action->"+consumerList);
					request.setAttribute(APPConstant.CONSUMER_BILL_LIST, consumerList);
					request.setAttribute(APPConstant.MESSAGE, APPConstant.INSERT_SUCCESS);
					forward = "showConsumerBills";
				}
			} else if (operation.equals("edit")) {
				//conBillDao.updateStaffDetail(dataSource, ConsumerBillsForm);
				Vector consumerList = conBillDao.getConsumerBillList(dataSource, facilityId);
				request.setAttribute(APPConstant.CONSUMER_BILL_LIST, consumerList);
				request.setAttribute(APPConstant.MESSAGE, APPConstant.EDIT_SUCCESS);
				forward = "showConsumerBills"; 
			}
			else if (operation.equals("generateBills")) {
				conBillDao.generateBill(dataSource, ConsumerBillsForm);
				Vector consumerList = conBillDao.getConsumerBillList(dataSource, facilityId);
				request.setAttribute(APPConstant.CONSUMER_BILL_LIST, consumerList);
				request.setAttribute(APPConstant.MESSAGE, APPConstant.EDIT_SUCCESS);
				forward = "showConsumerBills"; 
			}
			
			else if (operation.equals("forwardToAddPage")) {
				System.out.println("In Staff Master Action for adding->"+forward);
				forward = "addConsumerBills";
			} else if (operation.equals("forwardToEditPage")) {
				System.out.println("setDataForEditPage->"+operation);
				setDataForEditPage(request);
				forward = "editStaff";
			}else if (operation.equals("forwardTogenerateBill")) {
					System.out.println("forwardTogenerateBill->"+operation);
					setDataForgenerateBill(request);
					forward = "forwardTogenerateBill";	
			} else if (operation.equals("delete")) {
				deleteStaff(request, facilityId);
			} else if (operation.equals("showConsumerBills")) {
				Vector consumerList = conBillDao.getConsumerBillList(dataSource, facilityId);
				System.out.println("consumerList in Staff Manage Action->"+consumerList);
				request.setAttribute(APPConstant.CONSUMER_BILL_LIST, consumerList);
			}else if (operation.equals("searchService")){
				String serviceName=request.getParameter("serviceName"); 
				Vector consumerList = conBillDao.searchServices(dataSource, serviceName);
				request.setAttribute(APPConstant.CONSUMER_BILL_LIST, consumerList);
			}else if (operation.equals("showServiceResident")){
				int consumerId = getConsumerId(session);
				//int facilityId = getFacilityId(session);
				String serviceName=request.getParameter("serviceName"); 
				Vector consumerList = conBillDao.getServiceListResident(dataSource, consumerId, facilityId);
				request.setAttribute(APPConstant.CONSUMER_BILL_LIST, consumerList);
				forward = "showServiceResident";
			}
		} catch (Exception exception) {
			exception.printStackTrace();
			request.setAttribute(APPConstant.MESSAGE,APPConstant.FAILURE_MESSAGE);
		}
		System.out.println("Return From Staff Manage Action in Initial ->"+forward);
		return mapping.findForward(forward);
	}


	private void deleteStaff(HttpServletRequest request, int facilityId)
			throws Exception {
		DataSource dataSource = getDataSource(request, "corpo");
		String staffIds = request.getParameter("staffIds");
		String staffIdsArr[] = staffIds.split(",");
		
		ConsumerBillsDao conBillDao = new ConsumerBillsDao();
		conBillDao.inactiveStaff(dataSource, staffIdsArr);
		Vector staffList = conBillDao.getConsumerBillList(dataSource, facilityId);
		request.setAttribute(APPConstant.CONSUMER_BILL_LIST, staffList);
		request.setAttribute(APPConstant.MESSAGE, APPConstant.DELETE_SUCCESS);
	}

	private void setDataForEditPage(HttpServletRequest request)
			throws Exception {
		ConsumerBillsDao conBillDao = new ConsumerBillsDao();
		DataSource dataSource = getDataSource(request, "corpo");
		int staffId = Integer.parseInt((String)request.getParameter("staffId"));
		System.out.println("In Staff Master Action-->"+staffId);
		//ConsumerBillDetailBean bean = conBillDao.getStaffData(dataSource, staffId);
		//System.out.println("bean Returned In Staff Master Action-->"+bean);
		//request.setAttribute(APPConstant.STAFFDATA, bean);
	}
	
	
private void setDataForgenerateBill(HttpServletRequest request)	throws Exception {
	ConsumerBillsDao conBillDao = new ConsumerBillsDao();
	DataSource dataSource = getDataSource(request, "corpo");
	int residentId = Integer.parseInt((String)request.getParameter("residentIds"));
	System.out.println("In setDataForgenerateBill-->"+residentId);
	ConsumerBillDetailBean bean = conBillDao.getResidentsForBillGeneration(dataSource, residentId);
	System.out.println("bean Returned In Staff Master Action29092009-->"+bean.getResidentName());
	request.setAttribute(APPConstant.BILLGENERATEDATA, bean);
}
	
	private String validateServiceForm(ConsumerBillsForm ConsumerBillsForm ) {
		
		if (ConsumerBillsForm == null) {
			return "Please fill New Staff form";
		}
		else if (ConsumerBillsForm.getPreMeterReading() == null ||  ConsumerBillsForm.getPreMeterReading() == ' ') {
				return "Previous Meter Reading cannot be empty";
			}
		else if(ConsumerBillsForm.getCurMeterReading()==null || ConsumerBillsForm.getCurMeterReading()==' '){
				return "Previous Meter Reading cannot be empty";
		}
		
		else if(ConsumerBillsForm.getPreMeterReading()>ConsumerBillsForm.getCurMeterReading()){
			return "Current Meter Reading Can Not Be Less Than Previous Meter Reading";
		}
	
		return null;
		
	}
	
	
	/**
	 * date help function
	 * @param str_date
	 * @return
	 * @throws Exception
	 */
	private Date getDate(String str_date) throws Exception {
		DateFormat formatter = new SimpleDateFormat("dd/MM/yyyy");
		Date sqlDate = new java.sql.Date(formatter.parse(str_date).getTime());
		return sqlDate;
	}
	
	/**
	 * Date Help function
	 * @param month
	 * @param year
	 * @return
	 * @throws Exception
	 */
	private Date getDate(int month,int year) throws Exception {
		String billMonth = "";
		if(month<10){
			billMonth = "0"+month;
		}else{
			billMonth = "09";//String.valueOf(month);
		}
		String str_date = "01/"+billMonth+"/"+year;
		DateFormat formatter = new SimpleDateFormat("dd/MM/yyyy");
		Date sqlDate = new java.sql.Date(formatter.parse(str_date).getTime());
		return sqlDate;
	}
	
	public int getFacilityId(HttpSession session) {
		if(session.getAttribute(APPConstant.USER_INFORMATION) == null){
			return 1;
		}
		LoginHelper helper = (LoginHelper) session
				.getAttribute(APPConstant.USER_INFORMATION);
		return helper.getFacilityId();
	}
	public int getConsumerId(HttpSession session) {
		if(session.getAttribute(APPConstant.USER_INFORMATION) == null){
			return -1;
		}
		LoginHelper helper = (LoginHelper) session
				.getAttribute(APPConstant.USER_INFORMATION);
		return helper.getConsumerId();
	}
	
	public String getLoginName(HttpSession session) {
		if(session.getAttribute(APPConstant.USER_INFORMATION) == null){
			return "";
		}
		LoginHelper helper = (LoginHelper) session
				.getAttribute(APPConstant.USER_INFORMATION);
		return helper.getUserName();
	}
}
