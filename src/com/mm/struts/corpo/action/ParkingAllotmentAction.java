/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.mm.struts.corpo.action;

import java.sql.Date;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Vector;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import javax.sql.DataSource;

import org.apache.commons.dbcp.DataSourceConnectionFactory;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.mm.resource.APPConstant;
import com.mm.struts.corpo.form.ParkingAllotmentForm;
import com.mm.bean.ParkingAllotmentBean;
import com.mm.core.master.ParkingAllotmentDao;
import com.mm.core.resource.LoginHelper;

/** 
 * MyEclipse Struts
 * Creation date: 09-03-2009
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 */
public class ParkingAllotmentAction extends Action {
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		HttpSession session = request.getSession();
		ParkingAllotmentForm parkingForm = (ParkingAllotmentForm) form;
		ParkingAllotmentDao parkingDao = new ParkingAllotmentDao();
		DataSource dataSource = getDataSource(request, "corpo");
		String operation = request.getParameter("operation");
		
		String month = request.getParameter("month");
		String year = request.getParameter("year");
		
		
		
		String forward = "showParkingAllotment";
		int facilityId = (session.getAttribute("fId")!=null) ? Integer.parseInt((String)session.getAttribute("fId")) : 0;
		parkingForm.setFacilityId(facilityId);
		
		
		request.setAttribute("facilityId", facilityId);
		if (operation == null) {
			operation = parkingForm.getOperation();
		}
		if (operation == null) {
			operation = "";
		}
		
		
		
		try {
			if (operation.equals("addnew")) {
				String results = null;//validatparkingAllotmenteServiceForm(parkingForm);
				if (results != null) {
					request.setAttribute(APPConstant.MESSAGE, APPConstant.SERVICE_INSERT_FAILURE);
					forward = "addServiceFailure";
				}
				else {
					parkingDao.insertService(dataSource, parkingForm);
					Vector consumerList = parkingDao.getServiceAllotmentList(dataSource, facilityId);
					request.setAttribute(APPConstant.PARKING_ALLOTMENT_LIST, consumerList);
					request.setAttribute(APPConstant.MESSAGE, APPConstant.INSERT_SUCCESS);
					forward = "showParkingAllotment";
				}
			} else if (operation.equals("edit")) {
				parkingDao.updateService(dataSource, parkingForm);
				Vector consumerList = parkingDao.getServiceAllotmentList(dataSource, facilityId);
				request.setAttribute(APPConstant.PARKING_ALLOTMENT_LIST, consumerList);
				request.setAttribute(APPConstant.MESSAGE, APPConstant.EDIT_SUCCESS);
				forward = "showParkingAllotment"; 
			}
			else if (operation.equals("forwardToAddPage")) {
				forward = "addService";
			} else if (operation.equals("forwardToUpdatePage")) {
				setDataForEditPage(request);
				forward = "editParkingAllotment";
			} else if (operation.equals("delete")) {
				deleteConsumer(request, facilityId);
			} else if (operation.equals("showParkingAllotment")) {
				Vector serviceAllotList = parkingDao.getServiceAllotmentList(dataSource, facilityId);
				request.setAttribute(APPConstant.PARKING_ALLOTMENT_LIST, serviceAllotList);
			}else if (operation.equals("searchService")){
				String serviceName=request.getParameter("serviceName"); 
				Vector consumerList = parkingDao.searchServices(dataSource, serviceName);
				request.setAttribute(APPConstant.PARKING_ALLOTMENT_LIST, consumerList);
			}else if (operation.equals("showParkingAllotment")){
				int consumerId = getConsumerId(session);
				//int facilityId = getFacilityId(session);
				String serviceName=request.getParameter("serviceName"); 
				Vector consumerList = parkingDao.getServiceListResident(dataSource, consumerId, facilityId);
				request.setAttribute(APPConstant.PARKING_ALLOTMENT_LIST, consumerList);
				forward = "showParkingAllotment";
			}
		} catch (Exception exception) {
			exception.printStackTrace();
			request.setAttribute(APPConstant.MESSAGE,APPConstant.FAILURE_MESSAGE);
		}
		return mapping.findForward(forward);
	}


	private void deleteConsumer(HttpServletRequest request, int facilityId)
			throws Exception {
		DataSource dataSource = getDataSource(request, "corpo");
		String serviceIds = request.getParameter("serviceIds");
		String serviceIdsArr[] = serviceIds.split(",");
		ParkingAllotmentDao parkingDao = new ParkingAllotmentDao();
		parkingDao.inactiveService(dataSource, serviceIdsArr);
		Vector consumerList = parkingDao.getServiceAllotmentList(dataSource, facilityId);
		request.setAttribute(APPConstant.PARKING_ALLOTMENT_LIST, consumerList);
		request.setAttribute(APPConstant.MESSAGE, APPConstant.DELETE_SUCCESS);
	}

	private void setDataForEditPage(HttpServletRequest request)
			throws Exception {
		ParkingAllotmentDao parkingDao = new ParkingAllotmentDao();
		DataSource dataSource = getDataSource(request, "corpo");
		
		int user_Id = Integer.parseInt((String)request.getParameter("userId"));
		
		ParkingAllotmentBean bean = parkingDao.getParkingAllotmentData(dataSource, user_Id);
		request.setAttribute(APPConstant.PARKINGALLOTMENTDATA, bean);
	}
	
	private String validateServiceForm(ParkingAllotmentForm parkingForm ) {
		
		if (parkingForm == null) {
			return "Please fill New Paring Allotment form";
		}
		return null;
		
	}
	
	
	/**
	 * date help function
	 * @param str_date
	 * @return
	 * @throws Exception
	 */
	private Date getDate(String str_date) throws Exception {
		DateFormat formatter = new SimpleDateFormat("dd/MM/yyyy");
		Date sqlDate = new java.sql.Date(formatter.parse(str_date).getTime());
		return sqlDate;
	}
	
	/**
	 * Date Help function
	 * @param month
	 * @param year
	 * @return
	 * @throws Exception
	 */
	private Date getDate(int month,int year) throws Exception {
		String billMonth = "";
		if(month<10){
			billMonth = "0"+month;
		}else{
			billMonth = String.valueOf(month);
		}
		String str_date = "01/"+billMonth+"/"+year;
		DateFormat formatter = new SimpleDateFormat("dd/MM/yyyy");
		Date sqlDate = new java.sql.Date(formatter.parse(str_date).getTime());
		return sqlDate;
	}
	
	public int getFacilityId(HttpSession session) {
		if(session.getAttribute(APPConstant.USER_INFORMATION) == null){
			return 1;
		}
		LoginHelper helper = (LoginHelper) session
				.getAttribute(APPConstant.USER_INFORMATION);
		return helper.getFacilityId();
	}
	public int getConsumerId(HttpSession session) {
		if(session.getAttribute(APPConstant.USER_INFORMATION) == null){
			return -1;
		}
		LoginHelper helper = (LoginHelper) session
				.getAttribute(APPConstant.USER_INFORMATION);
		return helper.getConsumerId();
	}
	
	public String getLoginName(HttpSession session) {
		if(session.getAttribute(APPConstant.USER_INFORMATION) == null){
			return "";
		}
		LoginHelper helper = (LoginHelper) session
				.getAttribute(APPConstant.USER_INFORMATION);
		return helper.getUserName();
	}
}
