/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.mm.struts.corpo.action;

import java.sql.Date;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Vector;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import javax.sql.DataSource;

import org.apache.commons.dbcp.DataSourceConnectionFactory;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.mm.resource.APPConstant;
import com.mm.struts.corpo.form.ShiftMasterForm;
import com.mm.bean.ShiftMasterBean;
import com.mm.core.master.ShiftMasterDao;
import com.mm.core.resource.LoginHelper;

/** 
 * MyEclipse Struts
 * Creation date: 10-09-2009
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 */
public class ShiftMasterAction extends Action {
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		System.out.println("11In execute Shift Master Action");
		HttpSession session = request.getSession();
		ShiftMasterForm shiftMasterForm = (ShiftMasterForm) form;
		ShiftMasterDao shiftMasterDao = new ShiftMasterDao();
		DataSource dataSource = getDataSource(request, "corpo");
		String operation = request.getParameter("operation");
		String month = request.getParameter("month");
		String year = request.getParameter("year");
		
		
		String forward = "showShift";
		int facilityId = (session.getAttribute("fId")!=null) ? Integer.parseInt((String)session.getAttribute("fId")) : 0;
		//int facilityId = getFacilityId(session);
		shiftMasterForm.setFacilityId(facilityId);
		
		System.out.println("facilityId->"+facilityId);
		System.out.println("44operation->"+shiftMasterForm.getOperation());
		
		request.setAttribute("facilityId", facilityId);
		if (operation == null) {
			operation = shiftMasterForm.getOperation();
		}
		if (operation == null) {
			operation = "";
		}
		
		
		
		try {
			if (operation.equals("addnew")) {
				String results = null;//validateServiceForm(shiftMasterForm);
				if (results != null) {
					request.setAttribute(APPConstant.MESSAGE, results);
					forward = "addStaffFailure";
				}
				else {
					System.out.println("Ready To Insert....................Staff Master Form");
					shiftMasterDao.insertDetail(dataSource, shiftMasterForm);
					Vector consumerList = shiftMasterDao.getShiftList(dataSource, facilityId);
					System.out.println("consumerList in Shift Master Action 18092009->"+consumerList);
					request.setAttribute(APPConstant.STAFFSHIFT_LIST, consumerList);
					request.setAttribute(APPConstant.MESSAGE, APPConstant.INSERT_SUCCESS);
					forward = "showShift";
				}
			} else if (operation.equals("edit")) {
				shiftMasterDao.updateShift(dataSource, shiftMasterForm);
				Vector consumerList = shiftMasterDao.getShiftList(dataSource, facilityId);
				request.setAttribute(APPConstant.STAFFSHIFT_LIST, consumerList);
				request.setAttribute(APPConstant.MESSAGE, APPConstant.EDIT_SUCCESS);
				forward = "showShift"; 
			}/*else if (operation.equals("billGeneration")) {

				int billMonth = shiftMasterForm.getBillMonth();
				int billYear = shiftMasterForm.getBillYear();
				Date billDate = getDate(billMonth,billYear);
				
				String dueDate = request.getParameter("dueDateStr");
				Date date = getDate(dueDate);
				System.out.println("Billmonth & year"+ "="+billMonth+" & "+ billYear );
				if (billMonth !=0  && billYear!=0 ){
					shiftMasterDao.generateConsumerBills(dataSource, facilityId, billMonth, billYear, date);
					forward = "showShift";  // need to change the follow-up page
				}
				else {
					request.setAttribute(APPConstant.MESSAGE, "Month/Year cannot be BLANK!");
					forward = "showShift";  // need to change the follow-up page
				}
				}*/
			else if (operation.equals("forwardToAddPage")) {
				System.out.println("In Shift Master Action for adding 17092009->"+forward);
				forward = "addShift";
			} else if (operation.equals("forwardToEditPage")) {
				setDataForEditPage(request);
				forward = "editShift";
			} else if (operation.equals("delete")) {
				deleteShift(request, facilityId);
			} else if (operation.equals("showShift")) {
				Vector shiftList = shiftMasterDao.getShiftList(dataSource, facilityId);
				System.out.println("Shift List in Shift Master Action17092009->"+shiftList);
				request.setAttribute(APPConstant.STAFFSHIFT_LIST, shiftList);
			}else if (operation.equals("searchService")){
				String serviceName=request.getParameter("serviceName"); 
				Vector consumerList = shiftMasterDao.searchServices(dataSource, serviceName);
				request.setAttribute(APPConstant.STAFFSHIFT_LIST, consumerList);
			}else if (operation.equals("showServiceResident")){
				int consumerId = getConsumerId(session);
				//int facilityId = getFacilityId(session);
				String serviceName=request.getParameter("serviceName"); 
				Vector consumerList = shiftMasterDao.getServiceListResident(dataSource, consumerId, facilityId);
				request.setAttribute(APPConstant.STAFFSHIFT_LIST, consumerList);
				forward = "showServiceResident";
			}
		} catch (Exception exception) {
			exception.printStackTrace();
			request.setAttribute(APPConstant.MESSAGE,APPConstant.FAILURE_MESSAGE);
		}
		System.out.println("Return From Shift Master Action in Initial ->"+forward);
		return mapping.findForward(forward);
	}


	private void deleteShift(HttpServletRequest request, int facilityId)
			throws Exception {
		DataSource dataSource = getDataSource(request, "corpo");
		String shiftIds = request.getParameter("shiftIds");
		String shiftIdsArr[] = shiftIds.split(",");
		
		ShiftMasterDao shiftMasterDao = new ShiftMasterDao();
		shiftMasterDao.inactiveShift(dataSource, shiftIdsArr);
		Vector staffList = shiftMasterDao.getShiftList(dataSource, facilityId);
		request.setAttribute(APPConstant.STAFFSHIFT_LIST, staffList);
		request.setAttribute(APPConstant.MESSAGE, APPConstant.DELETE_SUCCESS);
	}

	private void setDataForEditPage(HttpServletRequest request)
			throws Exception {
		ShiftMasterDao shiftMasterDao = new ShiftMasterDao();
		DataSource dataSource = getDataSource(request, "corpo");
		int shiftId = Integer.parseInt((String)request.getParameter("shiftIds"));
		System.out.println("In Shift Manage Action For Edit-->"+shiftId);
		ShiftMasterBean bean = shiftMasterDao.getShiftData(dataSource, shiftId);
		System.out.println("bean In Shift Manage Action For Edit-->"+bean);
		request.setAttribute(APPConstant.SHIFTDATAUPDATE, bean);
	}
	
	private String validateServiceForm(ShiftMasterForm shiftMasterForm ) {
		
		if (shiftMasterForm == null) {
			return "Please fill New Staff form";
		}
		return null;
		
	}
	
	
	/**
	 * date help function
	 * @param str_date
	 * @return
	 * @throws Exception
	 */
	private Date getDate(String str_date) throws Exception {
		DateFormat formatter = new SimpleDateFormat("dd/MM/yyyy");
		Date sqlDate = new java.sql.Date(formatter.parse(str_date).getTime());
		return sqlDate;
	}
	
	/**
	 * Date Help function
	 * @param month
	 * @param year
	 * @return
	 * @throws Exception
	 */
	private Date getDate(int month,int year) throws Exception {
		String billMonth = "";
		if(month<10){
			billMonth = "0"+month;
		}else{
			billMonth = String.valueOf(month);
		}
		String str_date = "01/"+billMonth+"/"+year;
		DateFormat formatter = new SimpleDateFormat("dd/MM/yyyy");
		Date sqlDate = new java.sql.Date(formatter.parse(str_date).getTime());
		return sqlDate;
	}
	
	public int getFacilityId(HttpSession session) {
		if(session.getAttribute(APPConstant.USER_INFORMATION) == null){
			return 1;
		}
		LoginHelper helper = (LoginHelper) session
				.getAttribute(APPConstant.USER_INFORMATION);
		return helper.getFacilityId();
	}
	public int getConsumerId(HttpSession session) {
		if(session.getAttribute(APPConstant.USER_INFORMATION) == null){
			return -1;
		}
		LoginHelper helper = (LoginHelper) session
				.getAttribute(APPConstant.USER_INFORMATION);
		return helper.getConsumerId();
	}
	
	public String getLoginName(HttpSession session) {
		if(session.getAttribute(APPConstant.USER_INFORMATION) == null){
			return "";
		}
		LoginHelper helper = (LoginHelper) session
				.getAttribute(APPConstant.USER_INFORMATION);
		return helper.getUserName();
	}
}
