/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.mm.struts.corpo.action;

import java.sql.Date;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Vector;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import javax.sql.DataSource;

import org.apache.commons.dbcp.DataSourceConnectionFactory;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.mm.resource.APPConstant;
import com.mm.struts.corpo.form.StaffMasterForm;
import com.mm.bean.StaffMasterBean;
import com.mm.core.master.StaffMasterDao;
import com.mm.core.resource.LoginHelper;

/** 
 * MyEclipse Struts
 * Creation date: 10-09-2009
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 */
public class StaffMasterAction extends Action {
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		System.out.println("14In execute Staff Master Action");
		HttpSession session = request.getSession();
		StaffMasterForm staffMasterForm = (StaffMasterForm) form;
		StaffMasterDao staffMasterDao = new StaffMasterDao();
		DataSource dataSource = getDataSource(request, "corpo");
		String operation = request.getParameter("operation");
		String month = request.getParameter("month");
		String year = request.getParameter("year");
		
		
		String forward = "showStaff";
		int facilityId = (session.getAttribute("fId")!=null) ? Integer.parseInt((String)session.getAttribute("fId")) : 0;
		staffMasterForm.setFacilityId(facilityId);
		
		System.out.println("33operation in Staff Master->"+operation);
		System.out.println("44operation->"+staffMasterForm.getOperation());
		
		request.setAttribute("facilityId", facilityId);
		if (operation == null) {
			operation = staffMasterForm.getOperation();
		}
		if (operation == null) {
			operation = "";
		}
		
		
		
		try {
			if (operation.equals("addnew")) {
				String results = null;//validateServiceForm(staffMasterForm);
				if (results != null) {
					request.setAttribute(APPConstant.MESSAGE, results);
					forward = "addStaffFailure";
				}
				else {
					System.out.println("Ready To Insert...15102009.................Staff Master Form");
					staffMasterDao.insertDetail(dataSource, staffMasterForm);
					Vector consumerList = staffMasterDao.getStaffList(dataSource, facilityId);
					System.out.println("consumerList in Staff Master Action->"+consumerList);
					request.setAttribute(APPConstant.STAFF_LIST, consumerList);
					request.setAttribute(APPConstant.MESSAGE, APPConstant.INSERT_SUCCESS);
					forward = "showStaff";
				}
			} else if (operation.equals("edit")) {
				staffMasterDao.updateStaffDetail(dataSource, staffMasterForm);
				Vector consumerList = staffMasterDao.getStaffList(dataSource, facilityId);
				request.setAttribute(APPConstant.STAFF_LIST, consumerList);
				request.setAttribute(APPConstant.MESSAGE, APPConstant.EDIT_SUCCESS);
				forward = "showStaff"; 
			}
			else if (operation.equals("forwardToAddPage")) {
				System.out.println("In Staff Master Action for adding->"+forward);
				forward = "addStaff";
			} else if (operation.equals("forwardToEditPage")) {
				System.out.println("setDataForEditPage->"+operation);
				setDataForEditPage(request);
				forward = "editStaff";
			} else if (operation.equals("delete")) {
				deleteStaff(request, facilityId);
			} else if (operation.equals("showStaff")) {
				Vector consumerList = staffMasterDao.getStaffList(dataSource, facilityId);
				System.out.println("consumerList in Staff Manage Action->"+consumerList);
				
				request.setAttribute(APPConstant.STAFF_LIST, consumerList);
			}else if (operation.equals("searchService")){
				String serviceName=request.getParameter("serviceName"); 
				Vector consumerList = staffMasterDao.searchServices(dataSource, serviceName);
				request.setAttribute(APPConstant.STAFF_LIST, consumerList);
			}else if (operation.equals("showServiceResident")){
				int consumerId = getConsumerId(session);
				//int facilityId = getFacilityId(session);
				String serviceName=request.getParameter("serviceName"); 
				Vector consumerList = staffMasterDao.getServiceListResident(dataSource, consumerId, facilityId);
				request.setAttribute(APPConstant.STAFF_LIST, consumerList);
				forward = "showServiceResident";
			}
		} catch (Exception exception) {
			exception.printStackTrace();
			request.setAttribute(APPConstant.MESSAGE,APPConstant.FAILURE_MESSAGE);
		}
		System.out.println("Return From Staff Manage Action in Initial ->"+forward);
		return mapping.findForward(forward);
	}


	private void deleteStaff(HttpServletRequest request, int facilityId)
			throws Exception {
		DataSource dataSource = getDataSource(request, "corpo");
		String staffIds = request.getParameter("staffIds");
		String staffIdsArr[] = staffIds.split(",");
		
		StaffMasterDao staffMasterDao = new StaffMasterDao();
		staffMasterDao.inactiveStaff(dataSource, staffIdsArr);
		Vector staffList = staffMasterDao.getStaffList(dataSource, facilityId);
		request.setAttribute(APPConstant.STAFF_LIST, staffList);
		request.setAttribute(APPConstant.MESSAGE, APPConstant.DELETE_SUCCESS);
	}

	private void setDataForEditPage(HttpServletRequest request)
			throws Exception {
		StaffMasterDao staffMasterDao = new StaffMasterDao();
		DataSource dataSource = getDataSource(request, "corpo");
		int staffId = Integer.parseInt((String)request.getParameter("staffId"));
		System.out.println("In Staff Master Action-->"+staffId);
		StaffMasterBean bean = staffMasterDao.getStaffData(dataSource, staffId);
		System.out.println("bean Returned In Staff Master Action-->"+bean);
		request.setAttribute(APPConstant.STAFFDATA, bean);
	}
	
	private String validateServiceForm(StaffMasterForm staffMasterForm ) {
		
		if (staffMasterForm == null) {
			return "Please fill New Staff form";
		}
		else if (staffMasterForm.getStaffName() == null ||  staffMasterForm.getStaffName().trim().length() <= 0) {
				return "Staff Name cannot be empty";
			}
		else if(staffMasterForm.getAddress()==null || staffMasterForm.getAddress().trim().length()<=0){
				return "Staff Address can not be empty";
		}
		
		else if(staffMasterForm.getContactNo()==null || staffMasterForm.getContactNo().trim().length()<=0){
			return "Contact Number can not be empty";
		}
	
		else if(staffMasterForm.getSalary()==null || staffMasterForm.getSalary().trim().length()<=0){
			return "Salary can not be empty";
		}
		
		return null;
		
	}
	
	
	/**
	 * date help function
	 * @param str_date
	 * @return
	 * @throws Exception
	 */
	private Date getDate(String str_date) throws Exception {
		DateFormat formatter = new SimpleDateFormat("dd/MM/yyyy");
		Date sqlDate = new java.sql.Date(formatter.parse(str_date).getTime());
		return sqlDate;
	}
	
	/**
	 * Date Help function
	 * @param month
	 * @param year
	 * @return
	 * @throws Exception
	 */
	private Date getDate(int month,int year) throws Exception {
		String billMonth = "";
		if(month<10){
			billMonth = "0"+month;
		}else{
			billMonth = String.valueOf(month);
		}
		String str_date = "01/"+billMonth+"/"+year;
		DateFormat formatter = new SimpleDateFormat("dd/MM/yyyy");
		Date sqlDate = new java.sql.Date(formatter.parse(str_date).getTime());
		return sqlDate;
	}
	
	public int getFacilityId(HttpSession session) {
		if(session.getAttribute(APPConstant.USER_INFORMATION) == null){
			return 1;
		}
		LoginHelper helper = (LoginHelper) session
				.getAttribute(APPConstant.USER_INFORMATION);
		return helper.getFacilityId();
	}
	public int getConsumerId(HttpSession session) {
		if(session.getAttribute(APPConstant.USER_INFORMATION) == null){
			return -1;
		}
		LoginHelper helper = (LoginHelper) session
				.getAttribute(APPConstant.USER_INFORMATION);
		return helper.getConsumerId();
	}
	
	public String getLoginName(HttpSession session) {
		if(session.getAttribute(APPConstant.USER_INFORMATION) == null){
			return "";
		}
		LoginHelper helper = (LoginHelper) session
				.getAttribute(APPConstant.USER_INFORMATION);
		return helper.getUserName();
	}
}
